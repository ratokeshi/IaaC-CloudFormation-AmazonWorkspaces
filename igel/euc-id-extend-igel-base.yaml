---
Parameters:
  StackVersion:
    Type: String 
    Default: alpha 
    AllowedValues:
      - alpha 
      - bravo
      - charlie
      - delta 
      - echo 
      - foxtrot 
      - gulf 
      - hotel 
      - india 
    Description: Enter general version or attempt ID. 
  TimeStamp: 
    Type: String 
    Default: 2022-03-31-2359
    Description: Enter a Time stamp for naming and other identifiers. 
  IsAD:
    Type: String 
    Default: No 
    AllowedValues:
      - Yes 
      - No
    Description: Make sure that the number of AZs is 2 or more. 
  BaseDomain:
    Type: String 
    Default: r4t.net 
    Description: Enter a base domain, the default is r4t.net.
  DomainName: 
    Type: String 
    Default: bravo
    Description: Enter a netbios domain name.  The default is bravo. 
#  DomainPassword:
#    Type: String
#    Default: Password1234!
#    Description: Enter a default domain administrator password.  The user will be -- admin.   
#Conditions: 
Mappings: 
  RegionMap: 
    us-east-1: 
      u2064: "ami-04505e74c0741db8d"
      u1864: "ami-0e472ba40eb589f49"
      w1964: "ami-0f9a92942448ac56f"
    us-east-2: 
      u2064: "ami-0fb653ca2d3203ac1"
      u1864: "ami-03a0c45ebc70f98ea"
      w1964: "ami-0c4a11a8d0e503812"      
    us-west-1: 
      u2064: "ami-01f87c43e618bf8f0"
      u1864: "ami-009726b835c24a3aa"
      w1964: "ami-060613661baf99fa5"
    us-west-2: 
      u2064: "ami-0892d3c7ee96c0bf7"
      u1864: "ami-074251216af698218"
      w1964: "ami-000b6e3a1a8493a2f"
      #Add canada


#    eu-west-1: 
#      HVM64: "ami-047bb4163c506cd98"
#      HVMG2: "ami-31c2f645"
#    ap-southeast-1: 
#      HVM64: "ami-08569b978cc4dfa10"
#      HVMG2: "ami-0be9df32ae9f92309"
#    ap-northeast-1: 
#      HVM64: "ami-06cd52961ce9f0d85"
#      HVMG2: "ami-053cdd503598e4a9d"
Resources:
  CFTVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.40.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: workspaces-bravo-01
        - Key: Created
          Value: 2021-06-22-1328
  VPCSN11:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.40.11.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-public-11th"
  VPCSN21:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.40.21.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-private-21st" 
  VPCSN31:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.40.31.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-private-31st"      
  VPCSN12:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.40.12.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-public-12th"
  VPCSN22:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.40.22.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-private-22nd" 
  VPCSN32:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.40.32.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-private-32nd"    
  VPCSN13:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: 10.40.13.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-public-13th"
  VPCSN23:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: 10.40.23.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-private-23rd" 
  VPCSN33:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CFTVPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: 10.40.33.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: "wkspbravo-west-private-33rd"                     
  # Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: CFTVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref CFTVPC
      InternetGatewayId: !Ref InternetGateway
    # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFTVPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway      
  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN11
      RouteTableId:
        Ref: PublicRouteTable    
  mySubnetRouteTableAssociation12:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN12
      RouteTableId:
        Ref: PublicRouteTable        
  mySubnetRouteTableAssociation13:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN13
      RouteTableId:
        Ref: PublicRouteTable     
  # Next build NAT Gateway (NGW)
  # A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref VPCSN11
     Tags:
     - Key: Name
       Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
     Domain: CFTVPC     
  # Create Private subnet association 
    # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFTVPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway  
  # Associate private route table with NAT Gateway NGW
  mySubnetRouteTableAssociation21:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN21
      RouteTableId:
        Ref: PrivateRouteTable 
  mySubnetRouteTableAssociation22:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN22
      RouteTableId:
        Ref: PrivateRouteTable      
  mySubnetRouteTableAssociation23:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN23
      RouteTableId:
        Ref: PrivateRouteTable  
  mySubnetRouteTableAssociation31:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN31
      RouteTableId:
        Ref: PrivateRouteTable 
  mySubnetRouteTableAssociation32:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN32
      RouteTableId:
        Ref: PrivateRouteTable  
  mySubnetRouteTableAssociation33:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: VPCSN33
      RouteTableId:
        Ref: PrivateRouteTable          
  # Create Microsoft AD next 
  # TODO - Replace password with dynamic reference
  # - created dynamic passwrd in MySecret4AD below
#This is a Secret resource with a randomly generated password in its SecretString JSON.
  MySecretA:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecretForAppA
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "test-user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: AppName
          Value: AppA
  #todo replace password above into below
  MySecret4AD:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecret4AD
      Description: "This secret has a dynamically generated secret password for AD."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: AppName
          Value: ActiveDirectory        
  myDirectory: 
    Type: AWS::DirectoryService::MicrosoftAD
    Properties: 
      Name: "bravo.r4t.net"
      Password: "Password1234!"
      #  Ref: MicrosoftADPW
      ShortName: "bravo"
      #  Ref: "bravo"
      VpcSettings: 
        SubnetIds: 
          - Ref: VPCSN21
          - Ref: VPCSN22
        VpcId: 
          Ref: CFTVPC                   
  r4tSgGeneralLocalAdmin:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow local administrative ports
        VpcId:
          Ref: CFTVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 10.40.0.0/16
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.40.0.0/16  
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  r4tSgLocalOpen:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all to local
      VpcId:
        Ref: CFTVPC
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.40.0.0/16
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0     
  r4tSgIgelIcgUms:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 8443 for IGEL
      VpcId:
        Ref: CFTVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 10.40.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0    
  r4tSgIgelIcgExternal:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 8443 for IGEL
      VpcId:
        Ref: CFTVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0                         
  EC2InstanceIgelICG01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - u2064
      InstanceType: t3.xlarge
      KeyName: "a5"
      SubnetId:
        Ref: VPCSN11    
      SecurityGroupIds:
        - Ref: r4tSgGeneralLocalAdmin
        - Ref: r4tSgLocalOpen        
      Tags:
        - Key: "Name"
          Value: "IgelICG01" 
  EC2InstanceIgelICG02:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - u2064
      InstanceType: t3.xlarge
      KeyName: "a5"
      SubnetId:
        Ref: VPCSN12  
      SecurityGroupIds:
        - Ref: r4tSgGeneralLocalAdmin
        - Ref: r4tSgLocalOpen        
      Tags:
        - Key: "Name"
          Value: "IgelICG02" 
  EC2InstanceIgelICG03:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - u2064
      InstanceType: t3.xlarge
      KeyName: "a5"
      SubnetId:
        Ref: VPCSN13                                  
      SecurityGroupIds:
        - Ref: r4tSgGeneralLocalAdmin
        - Ref: r4tSgLocalOpen
      Tags:
        - Key: "Name"
          Value: "IgelICG03"    
  EC2InstanceIgelUMS01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - w1964
      InstanceType: t3.xlarge
      KeyName: "a5"
      SubnetId:
        Ref: VPCSN21                                  
      SecurityGroupIds:
        - Ref: r4tSgGeneralLocalAdmin
        - Ref: r4tSgLocalOpen                               
      Tags:
        - Key: "Name"
          Value: "IgelUMS01"    
      UserData:
        Fn::Base64: |
          #!/bin/bash
          cd .
          wget https://az743625.vo.msecnd.net/files/IGEL_CLOUD_GATEWAY/installer-2.05.100.bin 
          EOF   
  EC2InstanceIgelUMS02:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - w1964
      InstanceType: t3.xlarge
      KeyName: "a5"
      SubnetId:
        Ref: VPCSN22                                  
      SecurityGroupIds:
        - Ref: r4tSgGeneralLocalAdmin
        - Ref: r4tSgLocalOpen  
      Tags:
        - Key: "Name"
          Value: "IgelUMS02"    
      UserData:
        Fn::Base64: |
          #!/bin/bash
          cd .
          wget https://az743625.vo.msecnd.net/files/IGEL_CLOUD_GATEWAY/installer-2.05.100.bin 
          EOF   

  EC2InstanceIgelUMS03:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - w1964
      InstanceType: t3.xlarge
      KeyName: "a5"
      SubnetId:
        Ref: VPCSN23                                  
      SecurityGroupIds:
        - Ref: r4tSgGeneralLocalAdmin
        - Ref: r4tSgLocalOpen  
      Tags:
        - Key: "Name"
          Value: "IgelUMS03"     
      UserData:
        Fn::Base64: |
          #!/bin/bash
          cd .
          wget https://az743625.vo.msecnd.net/files/IGEL_CLOUD_GATEWAY/installer-2.05.100.bin 
          EOF                         
  WkspAdminJumpbox:
    Type: AWS::WorkSpaces::Workspace
    Properties: 
      BundleId: wsb-fn373c5rw
      DirectoryId: 
        - Ref: myDirectory
      RootVolumeEncryptionEnabled: False
      Tags: 
        - Key: "Name"
          Value: "WkspAdminJumpbox"    
      UserName: "TestUsername"
      UserVolumeEncryptionEnabled: False
      VolumeEncryptionKey: String
      #WorkspaceProperties: 
      #  WorkspaceProperties
